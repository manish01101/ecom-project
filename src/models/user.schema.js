import mongoose from 'mongoose'
import AuthRoles from '../utils/authRoles'
import bcrypt from 'bcryptjs'
import JWT from 'jsonwebtoken'
import config from '../config'
import crypto from 'crypto'

const userSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: ['true', 'Name is required'],
      maxLength: [120, "Name must be less than 50 chars"]
    },
    email: {
      type: String,
      required: ['true', 'Email is required'],
    },
    password: {
      type: String,
      required: ['true', 'Password is required'],
      maxLength: [15, "Password must be at least 8 chars"],
      select: false //this is only true while querying db
    },
    role: {
      type: String,
      enum: Object.values(AuthRoles),
      default: AuthRoles.USER
    },
    forgetPasswordToken: String,
    forgetPasswordExpiry: Date //for given time changes is allowed
  },
  {timestamps: true}
)

//encrypt the password before saving
userSchema.pre("save", async function(next){
  if(!this.isModified("password")) return next()
  this.password = await bcrypt.hash(this.password, 10)
  next();
})

userSchema.methods = {
  //compare password
  comparePassword: async function(enterPassword) {
    return await bcrypt.compare(enterPassword, this.password)
  },
  //generate JWT token
  getJWTtoken: function() {
    JWT.sign({_id: this._id}, config.JWT_SECRET, {
      expiresIn: config.JWT_EXPIRY
    })
  },
  // generate forgot password token
  generateForgotPasswordToken: function(){
    const forgotToken = crypto.randomBytes(20).toString("hex")

    //just to encrypt the token generated by crypto
    this.forgetPasswordToken = crypto
    .createHash("sha256")
    .update(forgotToken)
    .digest("hex")

    // time for token to expire
    this.forgetPasswordExpiry = Date.now() + 20 * 60 * 1000

    return forgotToken;
  }
}


export default mongoose.model("User", userSchema)